from __future__ import division
from sqlalchemy import create_engine
import pandas as pd

engine = create_engine('postgresql://nfldb@localhost:5432/nfldb')

# load passing_df
passing_df = pd.read_sql_query("SELECT game.season_year, game.week, game.home_team, game.home_score, game.away_team, game.away_score, player.team, player.full_name, player.position, SUM(play_player.passing_att) AS passing_att, SUM(play_player.passing_cmp) AS passing_cmp, SUM(play_player.passing_yds) AS passing_yds, SUM(play_player.passing_int) AS passing_int, SUM(play_player.passing_tds) AS passing_tds, SUM(play_player.passing_twopta) AS passing_twopta, SUM(play_player.passing_twoptm) AS passing_twoptm, SUM(play_player.receiving_rec) AS receiving_rec, SUM(play_player.receiving_tar) AS receiving_tar, SUM(play_player.receiving_tds) AS receiving_tds, SUM(play_player.receiving_twopta) AS receiving_twopta, SUM(play_player.receiving_twoptm) AS receiving_twoptm, SUM(play_player.receiving_yds) AS receiving_yds, SUM(play_player.fumbles_tot) AS fumbles_total, SUM(play_player.fumbles_rec_tds) AS fumble_rec_tds, SUM(play_player.kicking_rec_tds) AS kicking_rec_tds, SUM(play_player.puntret_tds) AS punt_ret_tds, SUM(play_player.rushing_att) AS rushing_att, SUM(play_player.rushing_yds) AS rushing_yds, SUM(play_player.rushing_tds) AS rushing_tds, SUM(play_player.rushing_twoptm) AS rushing_twoptm FROM play_player JOIN player ON player.player_id = play_player.player_id JOIN game ON game.gsis_id = play_player.gsis_id WHERE game.season_type = 'Regular' GROUP BY game.season_year, game.week, game.home_team, game.home_score, game.away_team, game.away_score, player.team, player.full_name, player.position HAVING SUM(play_player.passing_att) > 0 ORDER BY game.season_year DESC, game.week ASC, passing_yds DESC", con=engine)

# load receiving df
receiving_df = pd.read_sql_query("SELECT game.season_year, game.week, game.home_team, game.home_score, game.away_team, game.away_score, player.team, player.full_name, player.position, SUM(play_player.receiving_rec) AS receiving_rec, SUM(play_player.receiving_tar) AS receiving_tar, SUM(play_player.receiving_tds) AS receiving_tds, SUM(play_player.receiving_twopta) AS receiving_twopta, SUM(play_player.receiving_twoptm) AS receiving_twoptm, SUM(play_player.receiving_yds) AS receiving_yds, SUM(play_player.fumbles_tot) AS fumbles_total, SUM(play_player.fumbles_rec_tds) AS fumble_rec_tds, SUM(play_player.kicking_rec_tds) AS kicking_rec_tds, SUM(play_player.puntret_tds) AS punt_ret_tds, SUM(play_player.rushing_att) AS rushing_att, SUM(play_player.rushing_yds) AS rushing_yds, SUM(play_player.rushing_tds) AS rushing_tds, SUM(play_player.rushing_twoptm) AS rushing_twoptm FROM play_player JOIN player ON player.player_id = play_player.player_id JOIN game on game.gsis_id = play_player.gsis_id WHERE game.season_type = 'Regular' GROUP BY game.season_year, game.week, game.home_team, game.home_score, game.away_team, game.away_score, player.team, player.full_name, player.position HAVING SUM(play_player.receiving_rec) > 0 ORDER BY game.season_year DESC, game.week ASC, receiving_yds DESC", con=engine)

if __name__ == '__main__':

    passing_df.to_csv('/Users/MACDaddy/fantasy_football/nfldb_queries/Data/passing_df.csv')
    receiving_df.to_csv('/Users/MACDaddy/fantasy_football/nfldb_queries/Data/receiving_df.csv')
